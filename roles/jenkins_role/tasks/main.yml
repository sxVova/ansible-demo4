- name: Update system
  apt: update_cache=yes

- name: Install pip
  apt:
    name: python-pip

-  name: Install virtualenv
   shell: pip2 install virtualenv

-  name: Create virtualenv and activate
   shell: virtualenv "sxvova-venv" 
          creates="sxvova-venv/bin/activate"

- name: Install boto python package
  shell: pip2 install -U boto

- name: Upgrade boto 
  shell: pip2 install boto --upgrade --user

- name: Install jdk
  apt: name=openjdk-8-jdk state=latest

- name: Install jre
  apt: name=openjdk-8-jre state=latest

- name: Add jenkins key
  shell: wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -

- name: Add jenkins list
  shell: sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'

- name: Update system
  apt: update_cache=yes

- name: Install jenkins
  apt:
    name: jenkins=2.204.2

- name: Add ansible repository
  apt_repository: 
    repo: ppa:ansible/ansible

- name: Update system
  apt: update_cache=yes

- name: Install ansible
  apt:
    name: ansible

- name: Install packages for tests
  apt:
    pkg:
    - libxmlsec1-dev
    - pkg-config
    - memcached
    - redis-server
    - postgresql
    - unzip

-  name: Create virtualenv and activate
   shell: virtualenv --no-setuptools foo
          creates="foo/bin/activate"

- name: Install setuptools
  shell: pip install setuptools

- name: Install jenkins cli
  get_url: 
    url: https://{{ domain_name }}/jnlpJars/jenkins-cli.jar
    dest: /
    owner: jenkins
    group: jenkins

- name: Add jenkins user to docker group
  user:
    name: jenkins
    group: docker

# restore part

- name: Create backup directory
  file: path=/tmp/backup state=directory

- name: Upload restore script
  copy: 
    src=jenkins-restore.sh 
    dest=/tmp/backup/jenkins-restore.sh 
    mode=0755

- name: Download backup file from gcloud
  gc_storage:
    bucket:        '{{ gcloud_storage_name }}'
    object:        '{{ gcloud_tar_name }}'
    dest:          /tmp/backup/{{ gcloud_tar_name }}
    gs_access_key: '{{ gcloud_storage_key }}'
    gs_secret_key: '{{ gcloud_storage_secret_key }}'
    mode: get

-  name: Restore jenkins home directory
   shell: /tmp/backup/jenkins-restore.sh /var/lib/jenkins /tmp/backup/{{ gcloud_tar_name }}

- name: Restore ownership
  shell: chown jenkins.jenkins -R /var/lib/jenkins

- name: Create directory for auto scripts
  file: 
    path: /var/lib/jenkins/init.groovy.d
    state: directory
    owner: jenkins
    group: jenkins
  
#- name: Copy templete to install plugins
 # template:
  #  src: 00-install-plugins.groovy.j2
   # dest: /var/lib/jenkins/init.groovy.d/00-install-plugins.groovy
    #owner: jenkins
    #group: jenkins

- name: Copy templete to start sentry pipeline
  template:
    src: 01-run.groovy.j2
    dest: /var/lib/jenkins/init.groovy.d/01-run.groovy
    owner: jenkins
    group: jenkins

- name: Copy templete to start flask pipeline
  template:
    src: 02-run.groovy.j2
    dest: /var/lib/jenkins/init.groovy.d/02-run.groovy
    owner: jenkins
    group: jenkins

- name: Remove backup file
  file: path=/tmp/backup/{{ gcloud_tar_name }} state=absent

- name: Remove nginx config
  file:
    path: /etc/nginx/sites-enabled/*
    state: absent

- name: Add new nginx config file with proxy
  template: 
    src: nginx-le.j2
    dest: /etc/nginx/sites-enabled/le

- name: Reload nginx
  service: name=nginx state=restarted

- name: Restart jenkins
  service: name=jenkins state=restarted

